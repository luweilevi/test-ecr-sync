name: "Sync docker image"
description: "Copies a docker image to a target repository, its asusmed the source repo for the image is authenticated"
inputs:
  image:
    description: "Path of image to sync without repo, example: tradeshift-base/<component>:<version>"
    required: true
  target-image:
    description: "Target new image name, example: tradeshift-public/<component>:<version>"
    required: false
  source-repo:
    description: "Name of source repo to sync from, example: eu.gcr.io"
    required: true
  target-repo:
    description: "Name of target repo, example: tradeshift-registry.eu-central-1.cr.aliyuncs.com"
    required: true
  target_user:
    description: "Username for target repository"
    required: false
  target_password:
    description: "Password for target repository"
    required: false
  cn_access_key:
    description: "access key for cn ecr"
    required: false
  cn_access_secret:
    description: "access secret for cn ecr"
    required: false

runs:
  using: "composite"
  steps:
    - id: docker-sync
      if: ${{ !contains(inputs.target-repo, 'amazonaws.com.cn') }}
      shell: bash
      run: |
        if which regctl ; then
            REGCTL="$(which regctl)"
        else
            cat >regctl <<EOF
            #!/bin/sh
            opts=""
            case "\$*" in
              "registry login"*) opts="-t";;
            esac
            docker container run \$opts -i --rm --net host \\
              -u "\$(id -u):\$(id -g)" -e HOME -v \$HOME:\$HOME \\
              -v /etc/docker/certs.d:/etc/docker/certs.d:ro \\
              regclient/regctl:latest "\$@"
        EOF
            chmod 755 regctl
            REGCTL="$(pwd)/regctl"
        fi
        if [ -n "${{ inputs.target_user }}" ] && [ -n "${{ inputs.target_password }}" ]; then
          docker login -u ${{ inputs.target_user }} -p ${{ inputs.target_password }} ${{ inputs.target-repo }};
        fi
        $REGCTL image copy -v info ${{ inputs.source-repo }}/${{ inputs.image }} ${{ inputs.target-repo }}/${{ inputs.target-image || inputs.image }}

    - id: sync-ecr
      if: ${{ contains(inputs.target-repo, 'amazonaws.com.cn') }}
      env:
        AWS_ACCESS_KEY_ID: ${{ inputs.cn_access_key }}
        AWS_SECRET_ACCESS_KEY: ${{ inputs.cn_access_secret }}
        AWS_DEFAULT_REGION: cn-northwest-1
        ecr_iam_policy: >-
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "AllowCrossAccountPushPull",
                "Effect": "Allow",
                "Principal": {
                  "AWS": [
                    "arn:aws-cn:iam::120867251111:role/ts_all_prod_ts_eks-node-groups_role"
                  ]
                },
                "Action": [
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:BatchGetImage",
                  "ecr:CompleteLayerUpload",
                  "ecr:DescribeImageScanFindings",
                  "ecr:DescribeImages",
                  "ecr:DescribeRepositories",
                  "ecr:GetAuthorizationToken",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:GetRepositoryPolicy",
                  "ecr:InitiateLayerUpload",
                  "ecr:ListImages"
                ]
              }
            ]
          }
        lifecycle_policy: >-
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 50 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 50
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      shell: bash
      run: |
        if [[ "${{ inputs.image }}" =~ "amazonaws.com" ]]; then
          source_image=${{ inputs.image }}
          repo_name=$(echo ${{ inputs.image }} | sed -e 's/.*amazonaws.com[^\/]*\///g' -e 's/:.*//g')
          trim_ecr=$(echo ${{ inputs.image }} | sed -e 's/.*amazonaws.com[^\/]*\///g')
          des_image=${{ inputs.target-repo }}/$trim_ecr
          if [[ "${{ inputs.target-image }}" != "" ]]; then
            repo_name=$(echo ${{ inputs.image }} | sed -e 's/:.*//g')
            des_image=${{ inputs.target-repo }}/${{ inputs.target-image }}
          fi
        else
          repo_name=$(echo ${{ inputs.image }} | sed 's/:.*//g')
          source_image=${{ inputs.source-repo }}/${{ inputs.image }}
          des_image=${{ inputs.target-repo }}/${{ inputs.image }}
          if [[ "${{ inputs.target-image }}" != "" ]]; then
            repo_name=$(echo ${{ inputs.target-image }} | sed -e 's/:.*//g')
            des_image=${{ inputs.target-repo }}/${{ inputs.target-image }}
          fi
        fi

        aws ecr describe-repositories --region cn-northwest-1 --repository-names $repo_name && true

        if [ $? -eq 254 ]; then
          echo "-----creating repo-----"
          aws ecr create-repository --region cn-northwest-1 --repository-name ${repo_name}

          echo "-----setting ecr iam policy-----"
          aws ecr set-repository-policy --region cn-northwest-1 --repository-name ${repo_name} --policy-text '${{ env.ecr_iam_policy }}'

          echo "-----setting ecr lifecycle policy-----"
          aws ecr put-lifecycle-policy --region cn-northwest-1 --repository-name ${repo_name} --lifecycle-policy-text '${{ env.lifecycle_policy }}'

        fi

        if which regctl ; then
          REGCTL="$(which regctl)"
        else
          cat >regctl <<EOF
          #!/bin/sh
          opts=""
          case "\$*" in
            "registry login"*) opts="-t";;
          esac
          docker container run \$opts -i --rm --net host \\
            -u "\$(id -u):\$(id -g)" -e HOME -v \$HOME:\$HOME \\
            -v /etc/docker/certs.d:/etc/docker/certs.d:ro \\
            regclient/regctl:latest "\$@"
        EOF
            chmod 755 regctl
            REGCTL="$(pwd)/regctl"
        fi
        echo "Tradeshiftlevi01" | docker login -u levi.lu@tschina --password-stdin tradeshift-registry.cn-shanghai.cr.aliyuncs.com
        aws ecr get-login-password --region cn-northwest-1 | docker login --username AWS --password-stdin ${{ inputs.target-repo }}
        $REGCTL image copy -v info $source_image $des_image
